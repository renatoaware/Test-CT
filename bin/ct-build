#!/usr/bin/perl
# PODNAME: ct-build
use strict;
use warnings;
use File::Spec;

my $curdir = File::Spec->curdir();
my $ct_dir;
my $t_dir;
my $prove;
my $prove_args = '-lv';
my $check;
BEGIN {
    use Getopt::Long;
    use Pod::Usage;
    my $man = 0;
    my $help = 0;

    GetOptions(
        'help|?' => \$help,
        man      => \$man,

        "dir=s"           => \$ct_dir,
        "out=s"           => \$t_dir,

        "p|prove"         => \$prove,
        "prove_args=s"    => \$prove_args,
        "c|check-syntax!"  => \$check,

    ) or pod2usage(2);
    pod2usage(1) if $help;
    pod2usage(-exitstatus => 0, -verbose => 2) if $man;

    $ct_dir = File::Spec->catdir( $curdir, 'ct' ) if (!$ct_dir);

    die "Can't find CT directory ($ct_dir)\n" unless -d $ct_dir;


    $t_dir = File::Spec->catdir( $curdir, 't' ) if (!$t_dir);

    die "Can't find tests output directory ($t_dir)\n" unless -d $t_dir;
}

use Test::CT::Assembly;
$check //= 1;

my $compiler = Test::CT::Assembly->new(
    ct_dir          => $ct_dir,
    (defined $t_dir ? (test_dir_output => $t_dir) : ()),
    check_syntax => $check
);

my $tests = $compiler->write_tests;

if ($prove && exists $tests->{tests}){

    print "\nauto-execute prove on!\n";

    require IO::Select;

    print "executing prove $prove_args for @{$tests->{tests}}...\n  ";

    my $s = IO::Select->new();

    open my $fh, '-|', "prove $prove_args '".(join("' '", @{$tests->{tests}}))."'";
    $s->add($fh);

    while (my @readers = $s->can_read()) {
        for my $fh (@readers) {
            if (eof $fh) {
                $s->remove($fh);
                next;
            }
            my $l = <$fh>;
            print "  $l";
        }
    }

}